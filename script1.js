/*
ОСНОВЫ
'use strict';  Это строка должна быть самой первой, кроме коментов!
                Включает современный режим.


ПЕРЕМЕННЫЕ
let admin;
let name;
userName = 'Саид';
admin = userName;
alert(`admin ${admin}`);
Пример понятного именования переменных
    let ourPlanetName;
    let currentUserName;
Мы можем объявить переменные для хранения данных с помощью ключевых слов var, let или const.
    let – это современный способ объявления.
    var – это устаревший способ объявления. Обычно мы вообще не используем его, но мы рассмотрим тонкие отличия от let в главе Устаревшее ключевое слово "var" на случай, если это всё-таки вам понадобится.
    const – похоже на let, но значение переменной не может изменяться.
Переменные должны быть названы таким образом, чтобы мы могли легко понять, что у них внутри.


ТИПЫ ДАННЫХ
let string = 'qwerty';
let number = 1.0;
let boolean = true;
let justNullValue = null;
let justUndefinedValue = undefined; // let a; -> тоже равно undefined

В JavaScript есть 8 основных типов данных.

Семь из них называют «примитивными» типами данных:
    number для любых чисел: целочисленных или чисел с плавающей точкой; целочисленные значения ограничены диапазоном ±(253-1).
    bigint для целых чисел произвольной длины.
    string для строк. Строка может содержать ноль или больше символов, нет отдельного символьного типа.
    boolean для true/false.
    null для неизвестных значений – отдельный тип, имеющий одно значение null.
    undefined для неприсвоенных значений – отдельный тип, имеющий одно значение undefined.
    symbol для уникальных идентификаторов.
И один не является «примитивным» и стоит особняком:
    object для более сложных структур данных.
Оператор typeof позволяет нам увидеть, какой тип данных сохранён в переменной.
    Имеет две формы: typeof x или typeof(x).
    Возвращает строку с именем типа. Например, "string".
Для null возвращается "object" – это ошибка в языке, на самом деле это не объект.


ВЗАИМОДЕЙСТВИЕ
alert('Сообщение');
    Mодальное окно, пок-е сообщение. 
    Модальное окно, значит ничего больше нажать на странице, кроме ок или отмена нельзя.
prompt('Сообщение, [значение по умолчанию]);
    В [] пишутся необязательные, факультативные значения.
confirm(question);
    Функция confirm отображает модальное окно с текстом вопроса question и двумя кнопками: OK и Отмена.
    Результат – true, если нажата кнопка OK. В других случаях – false.
Пример
    let userName = prompt('Как вас зовут?', ['Имя пользователя не указано!']);
    alert(`Ваше имя ${userName}`);

ПРЕОБРАЗОВАНИЕ ТИПОВ
Существует 3 наиболее широко используемых преобразования: строковое, численное и логическое.
Строковое – Происходит, когда нам нужно что-то вывести. Может быть вызвано с помощью String(value). Для примитивных значений работает очевидным образом.
Численное – Происходит в математических операциях. Может быть вызвано с помощью Number(value).
Преобразование подчиняется правилам:
    Значение	Становится…
    undefined	NaN
    null	0
    true / false	1 / 0
    string	Пробельные символы по краям обрезаются. Далее, если остаётся пустая строка, то получаем 0, иначе из непустой строки «считывается» число. При ошибке результат NaN.
Логическое – Происходит в логических операциях. Может быть вызвано с помощью Boolean(value). 
Подчиняется правилам:
    Значение	Становится…
    0, null, undefined, NaN, ""	false
    любое другое значение	true
Большую часть из этих правил легко понять и запомнить. Особые случаи, в которых часто допускаются ошибки:
    undefined при численном преобразовании становится NaN, не 0.
    "0" и строки из одних пробелов типа " " при логическом преобразовании всегда true
    */