/*
ОСНОВЫ
'use strict';  Это строка должна быть самой первой, кроме коментов!
                Включает современный режим.


ПЕРЕМЕННЫЕ
let admin;
let name;
userName = 'Саид';
admin = userName;
alert(`admin ${admin}`);
Пример понятного именования переменных
    let ourPlanetName;
    let currentUserName;
Мы можем объявить переменные для хранения данных с помощью ключевых слов var, let или const.
    let – это современный способ объявления.
    var – это устаревший способ объявления. Обычно мы вообще не используем его, но мы рассмотрим тонкие отличия от let в главе Устаревшее ключевое слово "var" на случай, если это всё-таки вам понадобится.
    const – похоже на let, но значение переменной не может изменяться.
Переменные должны быть названы таким образом, чтобы мы могли легко понять, что у них внутри.


ТИПЫ ДАННЫХ
let string = 'qwerty';
let number = 1.0;
let boolean = true;
let justNullValue = null;
let justUndefinedValue = undefined; // let a; -> тоже равно undefined

В JavaScript есть 8 основных типов данных.

Семь из них называют «примитивными» типами данных:
    number для любых чисел: целочисленных или чисел с плавающей точкой; целочисленные значения ограничены диапазоном ±(253-1).
    bigint для целых чисел произвольной длины.
    string для строк. Строка может содержать ноль или больше символов, нет отдельного символьного типа.
    boolean для true/false.
    null для неизвестных значений – отдельный тип, имеющий одно значение null.
    undefined для неприсвоенных значений – отдельный тип, имеющий одно значение undefined.
    symbol для уникальных идентификаторов.
И один не является «примитивным» и стоит особняком:
    object для более сложных структур данных.
Оператор typeof позволяет нам увидеть, какой тип данных сохранён в переменной.
    Имеет две формы: typeof x или typeof(x).
    Возвращает строку с именем типа. Например, "string".
Для null возвращается "object" – это ошибка в языке, на самом деле это не объект.


ВЗАИМОДЕЙСТВИЕ
alert('Сообщение');
    Mодальное окно, пок-е сообщение. 
    Модальное окно, значит ничего больше нажать на странице, кроме ок или отмена нельзя.
prompt('Сообщение, [значение по умолчанию]);
    В [] пишутся необязательные, факультативные значения.
confirm(question);
    Функция confirm отображает модальное окно с текстом вопроса question и двумя кнопками: OK и Отмена.
    Результат – true, если нажата кнопка OK. В других случаях – false.
Пример
    let userName = prompt('Как вас зовут?', ['Имя пользователя не указано!']);
    alert(`Ваше имя ${userName}`);


ПРЕОБРАЗОВАНИЕ ТИПОВ

Существует 3 наиболее широко используемых преобразования: строковое, численное и логическое.
Строковое – Происходит, когда нам нужно что-то вывести. Может быть вызвано с помощью String(value). Для примитивных значений работает очевидным образом.
Численное – Происходит в математических операциях. Может быть вызвано с помощью Number(value).
Преобразование подчиняется правилам:
    Значение	Становится…
    undefined	NaN
    null	0
    true / false	1 / 0
    string	Пробельные символы по краям обрезаются. Далее, если остаётся пустая строка, то получаем 0, иначе из непустой строки «считывается» число. При ошибке результат NaN.
Логическое – Происходит в логических операциях. Может быть вызвано с помощью Boolean(value). 
Подчиняется правилам:
    Значение	Становится…
    0, null, undefined, NaN, ""	false
    любое другое значение	true
Большую часть из этих правил легко понять и запомнить. Особые случаи, в которых часто допускаются ошибки:
    undefined при численном преобразовании становится NaN, не 0.
    "0" и строки из одних пробелов типа " " при логическом преобразовании всегда true


ОПЕРАТОРЫ СРАВНЕНИЯ

Операторы сравнения возвращают значения логического типа.
Строки сравниваются посимвольно в лексикографическом порядке.
Значения разных типов при сравнении приводятся к числу. Исключением является сравнение с помощью операторов строгого равенства/неравенства.
Значения null и undefined равны == друг другу и не равны любому другому значению.
Будьте осторожны при использовании операторов сравнений вроде > и < с переменными, которые могут принимать значения null/undefined. Хорошей идеей будет сделать отдельную проверку на null/undefined.

ТЕРНАРНЫЙ УСЛОВНЫЙ ОПЕРАТОР

let login = prompt('login = ', [''])
let message = (login == 'user') ? 'Привет' :
    (login == 'admin') ? 'Добрый день' :
    'Вы кто?';
alert(message);


УСЛОВНЫЕ ОПЕРАТОРЫ

ИЛИ || or

И && and

НЕ ! 

let login = prompt('Введите логин');
if (login == null) {
    alert('Авторизация отменена!');
} else if (login != 'admin') {
    alert('Такого логина не существует!');
} else {
    let password = prompt('Введите пароль');
    if (password == null) {
        alert('Авторизация отменена!');
    } else if (password !='admin') {
        alert('Не верный пароль!');
    } else {
        alert('Авторизация успешно завершина!')
    }
};


ОПЕРАТОР НУЛЕВОГО СЛИЯНИЯ ??

Результат выражения a ?? b будет следующим:
    если a определено, то a,
    если a не определено, то b.

    let user;
alert(user??'anonimouse'); -> 'anonimouse

Оператор нулевого слияния ?? — это быстрый способ выбрать первое «определённое» значение из списка.
Используется для присвоения переменным значений по умолчанию:
    // будет height=100, если переменная height равна null или undefined
    height = height ?? 100;
Оператор ?? имеет очень низкий приоритет, лишь немного выше, чем у ? и =, поэтому при использовании его в выражении, скорее всего, потребуются скобки.
Запрещено использовать вместе с || или && без явно указанного приоритета, то есть без скобок.


ЦИКЛЫ WHILE И FOR

while (condition) {
  // код
  // также называемый "телом цикла"
};

do {
  // тело цикла
} while (condition);
Цикл сначала выполнит тело, 
а затем проверит условие condition, 
и пока его значение равно true, 
он будет выполняться снова и снова.

for (начало; условие; шаг) {
  // ... тело цикла ...
}
for (let i = 0; i < 3; i++) { // выведет 0, затем 1, затем 2
  alert(i);
}

Использование метки цикла
outer: for (let i = 0; i < 3; i++) {
        
        for (let j = 0; j < 3; j++) {
            let input = prompt(`Какое значение будет в матрице на координатах ${i}, ${j}?`, '');
            if (!input) break outer;

        };
        
};*/
do {
    let number = prompt('Введите число больше 100!');

} while (number <= 100)